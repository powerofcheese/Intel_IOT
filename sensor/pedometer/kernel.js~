/**
 * Created by Administrator on 2016/8/21.
 */


    //var oriValues = new Array(3);
    var valueNum = 4;
    
    var tempValue = new Array(valueNum);
    
    var tempCount = 0;
    
    var isDirectionUp = false;
    
    var continueUpCount = 0;
    
    var continueUpFormerCount = 0;
    
    var lastStatus = false;
    
    var peakOfWave = 0;
    
    var valleyOfWave = 0;
    
    var timeOfThisPeak = 0;
    
    var timeOfLastPeak = 0;
    
    var timeOfNow = 0;
    
    var gravityNew = 0;
    
    var gravityOld = 0;
    var initialValue = 1.2;
    
    var ThreadValue = 1.5;
    var CountTimeState = 0;
    
    var CURRENT_SETP = 0;
    var TEMP_STEP = 0;
    var lastStep = -1;
    
    var gravity = new Array(3);
    
    var average = 0;

    //var duration = 4000;
    
    var sensorObj = require('jsupm_mpu9150');
    
// Instantiate an MPU9105 on default I2C bus and address
    var sensor = new sensorObj.MPU9250(0,0x68,0x0c,false);
    
// Initialize the device with default values
    sensor.init();
    sensor.setGyroscopeScale(0);

    var x = new sensorObj.new_floatp();
    var y = new sensorObj.new_floatp();
    var z = new sensorObj.new_floatp();


  function onSensorChanged(x,y,z) {

    gravityNew = Math.sqrt(x * x+y * y + z * z);
  
    DetectorNewStep(gravityNew);
}


    function DetectorNewStep(values) {
      if (gravityOld === 0) {
         gravityOld = values;
      } else {
          if (DetectorPeak(values, gravityOld)) {
              timeOfLastPeak = timeOfThisPeak;
              timeOfNow = (new Date()).valueOf();
              //console.log(timeOfNow - timeOfLastPeak);
              //console.log(peakOfWave - valleyOfWave);
              if (timeOfNow - timeOfLastPeak >= 200
                && (peakOfWave - valleyOfWave >= ThreadValue) && timeOfNow - timeOfLastPeak <= 2000) {
                 timeOfThisPeak = timeOfNow;
                   preStep();
        }
       
         if (timeOfNow - timeOfLastPeak >= 200
            && (peakOfWave - valleyOfWave >= initialValue)) {
               timeOfThisPeak = timeOfNow;
               ThreadValue = Peak_Valley_Thread(peakOfWave - valleyOfWave);
        }
    }
}
         gravityOld = values;
}

function preStep() {
    if (CountTimeState === 0) {
        
        //time = new TimeCount(duration, 700);
        //time.start();
       // console.log("555");
        CountTimeState = 1;
       
    } else if (CountTimeState == 1) {
        TEMP_STEP++;
        console.log(TEMP_STEP);
    } else if (CountTimeState == 3) {
        CURRENT_SETP++;
    }
}



function DetectorPeak(newValue, oldValue) {
    
    lastStatus = isDirectionUp;
    if (newValue >= oldValue) {
        isDirectionUp = true;
        continueUpCount++;
    } else {

        continueUpFormerCount = continueUpCount;
        continueUpCount = 0;
        isDirectionUp = false;
    }

    if (!isDirectionUp && lastStatus
        && (continueUpFormerCount >= 2 && (oldValue >= 1))) {
        peakOfWave = oldValue;
        return true;
    } else if (!lastStatus && isDirectionUp) {
        valleyOfWave = oldValue;
        return false;
    } else {
        return false;
    }
}



function Peak_Valley_Thread(value) {
    var tempThread = ThreadValue;
    if (tempCount < valueNum) {
        tempValue[tempCount] = value;
        tempCount++;
    } else {
        tempThread = averageValue(valueNum);
        for (var i = 1; i < valueNum; i++) {
            tempValue[i - 1] = tempValue[i];
        }
        tempValue[valueNum - 1] = value;
    }
    return tempThread;
}


function averageValue( n) {
    var ave = 0;
    for (var i = 0; i < n; i++) {
        ave += tempValue[i];
    }
    ave = ave / valueNum;
    if (ave >= 8)
        ave = 4.3;
else if (ave >= 7 && ave < 8)
        ave =  3.3;
else if (ave >= 4 && ave < 7)
        ave =  2.3;
else if (ave >= 3 && ave < 4)
        ave =  2.0;
else {
        ave =  1.3;
    }
    return ave;
}

setInterval(function()
{
    sensor.update();

    sensor.getAccelerometer(x, y, z);
    ax= sensorObj.floatp_value(x);
    ay= sensorObj.floatp_value(y);
    az= sensorObj.floatp_value(z);
   
    onSensorChanged(ax,ay,az);
     //if(IN.connect===true){
//        sendOUT({
  //           step:TEMP_STEP
    //     });
         //;};

}, 20); 
